"""–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ doctest –∏ unittest


–í–æ–∑—å–º—ë–º —É–∂–µ –∑–Ω–∞–∫–æ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º
–Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –≤ doctest —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è unittest.
–§–∞–π–ª prime.py –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ doctest


def is_prime(p: int) -> bool:
    if not isinstance(p, int):
        raise TypeError('The number P must be an integer type')
    elif p < 2:
        raise ValueError('The number P must be greater than one')
    elif p > 100_000_000:
        print('If the number P is prime, the check may take a long time. Working...')
    for i in range(2, p):
        if p % i == 0:
            return False
    return True


–ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –≤ –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç.


–ê —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç —Ñ–∞–π–ª test_prime.py

import io
import unittest
from unittest.mock import patch
from prime import is_prime


class TestPrime(unittest.TestCase):
    def test_is_prime(self):
        self.assertFalse(is_prime(42))
        self.assertTrue(is_prime(73))
    def test_type(self):
        self.assertRaises(TypeError, is_prime, 3.14)
    def test_value(self):
        with self.assertRaises(ValueError):
            is_prime(-100)
            is_prime(1)
    @patch('sys.stdout', new_callable=io.StringIO)
    def test_warning_false(self, mock_stdout):
        self.assertFalse(is_prime(100_000_001))
        self.assertEqual(mock_stdout.getvalue(), 'If the number P is prime, '
                                                 'the check may take a long time. Working...\n')

    @patch('sys.stdout', new_callable=io.StringIO)
    def test_warning_true(self, mock_stdout):
        self.assertTrue(is_prime(100_000_007))
        self.assertEqual(mock_stdout.getvalue(), 'If the number P is prime, '
                                                 'the check may take a long time. Working...\n')


if __name__ == '__main__':
    unittest.main()


–†–∞–∑–±–µ—Ä—ë–º –∫–∞–∂–¥—ã–π –∏–∑ —Ç–µ—Å—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞:

‚û¢ –ö–µ–π—Å test_is_prime
–ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ assertFalse –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å
–ª–æ–∂—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ assertTrue –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É.

‚û¢ –ö–µ–π—Å test_type
–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ assertRaises –æ–∂–∏–¥–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–∏–ø–∞ (–∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω) –µ—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å
—Ñ—É–Ω–∫—Ü–∏—é is_prime (–∞—Ä–≥—É–º–µ–Ω—Ç –¥–≤–∞) –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–π —á–∏—Å–ª–æ 3.14 (–∞—Ä–≥—É–º–µ–Ω—Ç —Ç—Ä–∏).

‚û¢ –ö–µ–π—Å test_value
–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
–¥–≤–∞–∂–¥—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é. assertRaises –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –æ—à–∏–±–∫—É
–∑–Ω–∞—á–µ–Ω–∏—è

‚û¢ –ö–µ–π—Å—ã test_warning_false –∏ test_warning_true


üî• –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–∞ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ—Å–Ω–æ–≤ unittest. –≠—Ç–æ —Å–∫–æ—Ä–µ–µ
–ø—Ä–∏–º–µ—Ä –Ω–∞ –±—É–¥—É—â–µ–µ –¥–ª—è —Å–∞–º—ã—Ö –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö.

–ò—Å–ø–æ–ª—å–∑—É—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä patch –∏–∑ –º–æ–¥—É–ª—è mock –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫
–≤—ã–≤–æ–¥–∞ sys.stdout –æ–±—Ä–∞—â–∞—è—Å—å –∫ StringIO –º–æ–¥—É–ª—è –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ io. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø–∞–¥–∞–µ—Ç
–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä mock_stdout. –í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –¥–µ–ª–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ª–æ–∂—å –∏–ª–∏
–∏—Å—Ç–∏–Ω—É –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞. –ê –¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–ª—É—á–∏–ª
–∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.

üî• –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞–∑–±–æ—Ä Mock –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –ª–µ–∫—Ü–∏–∏. –°–∞–º—ã–µ
–ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —è–∑—ã–∫–∞.
https://docs.python.org/3.11/library/unittest.mock.html


–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ doctest –∏–∑ unittest

–ê —á—Ç–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ doctest? –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
test_loader –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã doctest –≤ –ø–µ—Ä–µ—á–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä."""

import doctest
import unittest
import prime


def load_tests(loader, tests, ignore):
    tests.addTests(doctest.DocTestSuite(prime))
    tests.addTests(doctest.DocFileSuite('prime.md'))
    return tests


if __name__ == '__main__':
    unittest.main()


"""–û–±—ä–µ–∫—Ç tests –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ addTests –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å prime.
–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å DocTestSuite –∏–∑ –º–æ–¥—É–ª—è doctest. –ê –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å DocFileSuite. –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è
unittest.main —Å–æ–±–µ—Ä—ë—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–µ–µ —Ç–µ—Å—Ç—ã doctest –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∏—Ö.
"""