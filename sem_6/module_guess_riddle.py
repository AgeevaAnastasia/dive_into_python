"""
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными вариантами отгадок
и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была отгадана загадка или ноль,
если попытки исчерпаны.

Добавьте в модуль с загадками функцию, которая хранит словарь списков.
Ключ словаря - загадка, значение - список с отгадками.
Функция в цикле вызывает загадывающую функцию, из предыдущей задачи,
чтобы передать ей все свои загадки.

Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки)
и число (номер попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах отгадывания.
Для хранения используйте защищённый словарь уровня модуля.
Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря
в удобном для чтения виде.
Для формирования результатов используйте генераторное выражение.

"""
__all__ = ["riddle_box", "show_riddle_result"]


def riddle(text, solution, attempts):
    count = 1
    while count < attempts:
        user_sol = input(f'Отгадайте загадку: {text}. Ваш ответ: ').lower()
        if user_sol in solution:
            print(f'Вы угадали с {count} попытки!')
            return count
        else:
            print('Вы ошиблись! Попробуйте еще раз.')
            count += 1
        if count == attempts:
            print(f'Вы исчерпали все попытки. Ответ был {solution[0]}')
            return 0


def riddle_result(text, attempt):
    _dict_result[text] = attempt


def riddle_box():
    dict_riddle = {"Зимой и летом одним цветом": ["елка", "ель", "ёлка", "ёлочка", "елочка"],
                   "Не лает не кусает, а в дом не пускает": ["замок", "замочек", "засов"],
                   "Сто одёжек, все без застёжек": ["капуста", "лук", "чеснок"],
                   "Сидит девица, сама в темнице, коса на улице": ["морковь", "морковка"],
                   "Без окон, без дверей, полна горница людей": ["арбуз", "подсолнух",
                                                                 "подсолнечник", "кукуруза",
                                                                 "горох", "фасоль"],
                   "Висит груша, нельзя скушать": ['лампочка', 'лампа']}
    for key, value in dict_riddle.items():
        riddle_result(key, riddle(text=key, solution=value, attempts=5))


_dict_result = {}


def show_riddle_result():
    print("\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
          "\nВаши результаты: ")

    """for key, value in _dict_result.items():
        if value == 0:
            print(f'Загадку "{key}" вы не угадали!')
        else:
            print(f'Загадку "{key}" вы угадали с {value} попытки')"""

    output = ", ".join([f'\nВы отгадали загадку "{key}" с {value} попытки'
                        for key, value in _dict_result.items()])
    print(output)
    print("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")


if __name__ == '__main__':
    riddle_box()
    show_riddle_result()
